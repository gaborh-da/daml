rules_haskell excludes Haskell libraries from the extra-libraries field in
package config files to avoid linker errors in a Haskell-CC-Haskell sandwhich.
See https://github.com/tweag/rules_haskell/issues/873.
Here we carry Haskell libraries only through the extra-libraries field, so we
have to undo those patches.
diff --git a/haskell/private/actions/link.bzl b/haskell/private/actions/link.bzl
index cb6aa19..65cd2c6 100644
--- a/haskell/private/actions/link.bzl
+++ b/haskell/private/actions/link.bzl
@@ -485,15 +485,6 @@ def _add_external_libraries(args, ext_libs):
     deduped = list.dedup_on(get_lib_name, ext_libs)
 
     for lib in deduped:
-        # This test is a hack. When a CC library has a Haskell library
-        # as a dependency, we need to be careful to filter it out,
-        # otherwise it will end up polluting the linker flags. GHC
-        # already uses hs-libraries to link all Haskell libraries.
-        #
-        # TODO Get rid of this hack. See
-        # https://github.com/tweag/rules_haskell/issues/873.
-        if get_lib_name(lib).startswith("HS"):
-            continue
         args.add_all([
             "-L{0}".format(
                 paths.dirname(lib.path),
diff --git a/haskell/private/actions/package.bzl b/haskell/private/actions/package.bzl
index 6969c05..738f1ac 100644
--- a/haskell/private/actions/package.bzl
+++ b/haskell/private/actions/package.bzl
@@ -28,19 +28,10 @@ def _get_extra_libraries(dep_info):
     extra_lib_dirs = set.empty()
     for lib in cc_libs:
         lib_name = get_lib_name(lib)
-
-        # This test is a hack. When a CC library has a Haskell library
-        # as a dependency, we need to be careful to filter it out,
-        # otherwise it will end up polluting extra-libraries, when GHC
-        # already uses hs-libraries to locate all Haskell libraries.
-        #
-        # TODO Get rid of this hack. See
-        # https://github.com/tweag/rules_haskell/issues/873.
-        if not lib_name.startswith("HS"):
-            if not set.is_member(seen_libs, lib_name):
-                set.mutable_insert(seen_libs, lib_name)
-                extra_libs.append(lib_name)
-            set.mutable_insert(extra_lib_dirs, lib.dirname)
+        if not set.is_member(seen_libs, lib_name):
+            set.mutable_insert(seen_libs, lib_name)
+            extra_libs.append(lib_name)
+        set.mutable_insert(extra_lib_dirs, lib.dirname)
     return (set.to_list(extra_lib_dirs), extra_libs)
 
 def package(
